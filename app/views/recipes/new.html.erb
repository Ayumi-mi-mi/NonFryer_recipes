<body class="flex flex-col items-center bg-white p-4">
  <!-- Header -->
  <div class="flex justify-between items-center w-full mb-4">
    <%= render "shared/sidebar" %>
    <div class="flex space-x-2">
      <button class="bg-white text-gray-700 border border-gray-300 rounded px-4 py-2 rounded">保存</button>
      <button class="bg-orange-500 text-white px-4 py-2 rounded">公開</button>
      <button class="bg-white text-gray-700  border border-gray-300 rounded px-4 py-2 rounded">×</button>
    </div>
  </div>

  <!-- Image Upload -->
  <div class="w-full bg-gray-200 h-48 flex justify-center items-center mb-2">
    <button>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
      </svg>
    </button>
  </div>

  <!-- Title Input -->
  <input type="text" placeholder="なにを作ったのか教えてください！" class="w-full bg-white border border-gray-300 rounded px-4 py-2 mb-1" />
  <p class="text-xs text-orange-500 mb-4">ノンフライヤーを使用したレシピのみ登録してください</p>

  <!-- Tags -->
  <div class="section w-full mb-4" data-section="tags">
    <label class="block text-gray-700 mb-2">タグを追加</label>
    <div class="item flex items-center space-x-2 mb-2">
      <button class="remove-item text-gray-700 px-2">×</button>
      <input type="text" class="bg-white border border-gray-300 rounded px-4 py-2" placeholder="タグ" />
      <button class="add-item text-gray-700 px-4 py-2 rounded self-end">＋</button>
    </div>
  </div>

  <!-- model -->
  <div class="w-full mb-4">
    <label class="block text-orange-500 mb-2">ノンフライヤーの機種</label>
    <input type="text" class="bg-white border border-gray-300 rounded px-4 py-2" placeholder="cosori" />
  </div>

  <!-- Preheat Section -->
  <div class="w-full grid grid-cols-2 gap-4 mb-4">
    <div>
      <label class="block text-gray-700">予熱</label>
      <div class="flex items-center space-x-2">
        <input type="number" placeholder="180" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
        <span class="text-gray-500">℃</span>
      </div>
    </div>
    <div>
      <label class="block text-gray-700">　</label>
      <div class="flex items-center space-x-2">
        <input type="number" placeholder="3" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
        <span class="text-gray-500">分</span>
      </div>
    </div>
  </div>

  <!-- Heat Section -->
  <div class="w-full mb-4" id="heat-section">
    <div class="flex">
      <div class="">
        <label class="block text-orange-500">調理</label>
        <div class="item flex items-center space-x-2 mb-2">
          <button class="remove-item text-gray-700 px-2">×</button>
          <input type="number" placeholder="180" class="w-full bg-white border border-gray-300 rounded px-2 py-1" style="width: 100px;"/>
          <span class="text-orange-500">℃</span>
        </div>
      </div>
    </div>

    <div class="">
      <div>
        <label class="block text-gray-700">　</label>
        <div class="item flex items-center space-x-2 mb-2">
          <input type="number" placeholder="10" class="w-full bg-white border border-gray-300 rounded px-2 py-1" style="width: 100px;"/>
          <span class="text-orange-500">分</span>
          <button class="add-item text-gray-700 px-4 py-2 rounded self-end">＋</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Ingredients Section -->
  <div class="section w-full mb-4">
    <label class="block text-gray-700 mb-2">材料</label>
    <div class="item flex items-center space-x-2 mb-2">
      <button class="remove-item text-gray-700 px-2">×</button>
      <input type="text" class="w-full bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
      <button class="add-item text-gray-700 px-4 py-2 rounded">＋</button>
    </div>
  </div>

  <!-- Steps Section -->
  <div id="steps-section" class="steps-Section w-full mb-4">
    <label class="block text-gray-700 mb-2">作り方</label>
    <div class="step-item flex items-center space-x-2 mb-2">
      <button class="remove-step text-gray-700 px-2">×</button>
      <span class="step-number text-gray-400">1</span>
      <input type="text" class="w-full bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
      <button class="add-step text-gray-700 px-4 py-2 rounded">＋</button>
    </div>
  </div>

  <!-- Tips Section -->
  <div class="w-full mb-4">
    <label class="block text-gray-700 mb-2">ポイント</label>
    <div class="flex items-center space-x-2 mb-2">
      <button class="text-gray-700 px-2">×</button>
      <input type="text" class="w-full bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
    </div>
  </div>

  <!-- URL Section -->
  <div class="section w-full mb-4">
    <label class="block text-gray-700 mb-2">参考URL</label>
    <div class="item flex items-center space-x-2 mb-2">
      <button class="remove-item text-gray-700 px-2">×</button>
      <input type="url" class="w-full bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
      <button class="add-item text-gray-700 px-4 py-2 rounded">＋</button>
    </div>
  </div>

  <script>
  // instructions
    document.addEventListener("DOMContentLoaded", () => {
      const stepsSection = document.getElementById("steps-section");

      function updateStepNumbers() {
        const stepItems = stepsSection.querySelectorAll(".step-item");
        stepItems.forEach((item, index) => {
          item.querySelector(".step-number").textContent = index + 1;
        });
      }

      stepsSection.addEventListener("click", (e) => {
        if (e.target.classList.contains("add-step")) {
          // 新しいステップ入力欄を追加
          const newStep = document.createElement("div");
          newStep.className = "step-item flex items-center space-x-2 mb-2";
          newStep.innerHTML = `
            <button class="remove-step text-gray-700 px-2">×</button>
            <span class="step-number text-gray-400"></span>
            <input type="text" class="w-full bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
            <button class="add-step text-gray-700 px-4 py-2 rounded">＋</button>
          `;
          stepsSection.appendChild(newStep);
          updateStepNumbers();
        } else if (e.target.classList.contains("remove-step")) {
          // 入力欄を削除
          const stepItems = stepsSection.querySelectorAll(".step-item");
          if (stepItems.length > 1) {
            e.target.parentElement.remove();
            updateStepNumbers();
          }
        }
      });

      // 初期状態で番号を設定
      updateStepNumbers();
    });

  // Heat
    document.addEventListener("DOMContentLoaded", () => {
      // Heat Section内での＋ボタンのクリック処理
      document.getElementById("heat-section").addEventListener("click", (e) => {
        if (e.target.classList.contains("add-item")) {
          // 新しいアイテムのHTMLを作成
          const newItem = document.createElement("div");
          newItem.className = "item flex items-center space-x-2 mb-2";
          newItem.innerHTML = `
            <button class="remove-item text-gray-700 px-2">×</button>
            <input type="number" placeholder="180" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
            <span class="text-orange-500">℃</span>
            <input type="number" placeholder="10" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
            <span class="text-orange-500">分</span>
            <button class="add-item text-gray-700 px-4 py-2 rounded self-end">＋</button>
          `;

          // 新しい項目を追加
          e.target.closest(".item").parentElement.appendChild(newItem);
        }

        // ×ボタンがクリックされたときの処理
        if (e.target.classList.contains("remove-item")) {
          const items = document.querySelectorAll(".item");
          if (items.length > 1) {
            e.target.closest(".item").remove();
          }
        }
      });
    });

  // other
    document.addEventListener("DOMContentLoaded", () => {
      function updateNumbers(section) {
        const items = section.querySelectorAll(".item");
        items.forEach((item, index) => {
          // 各アイテム内に番号を更新（必要なら番号を表示する箇所に番号をセット）
          const numberElement = item.querySelector(".step-number");
          if (numberElement) {
            numberElement.textContent = index + 1;
          }
        });
      }

      // 全てのセクションに対して共通の処理を設定
      document.querySelectorAll(".section").forEach((section) => {
        section.addEventListener("click", (e) => {
          if (e.target.classList.contains("add-item")) {
            // 新しい入力欄を追加
            const sectionType = section.getAttribute("data-section");
            const newItem = document.createElement("div");
            newItem.className = "item flex items-center space-x-2 mb-2";

            // 入力欄にセクションごとのスタイリングを適用
            const inputClass = sectionType === "tags" ? "w-1/3" : "w-full"; // Tagsセクションだけ横幅を狭く
            newItem.innerHTML = `
              <button class="remove-item text-gray-700 px-2">×</button>
              <input type="text" class="${inputClass} bg-white border border-gray-300 rounded px-4 py-2" placeholder="" />
              <button class="add-item text-gray-700 px-4 py-2 rounded">＋</button>
            `;
            section.appendChild(newItem);
            updateNumbers(section);
          } else if (e.target.classList.contains("remove-item")) {
            // 入力欄を削除
            const items = section.querySelectorAll(".item");
            if (items.length > 1) {
              e.target.parentElement.remove();
              updateNumbers(section);
            }
          }
        });

        // 初期状態で番号を設定（番号を表示する場合のみ）
        updateNumbers(section);
      });
    });
  </script>
</body>
