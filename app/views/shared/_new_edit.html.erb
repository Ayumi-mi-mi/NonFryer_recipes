  <%= form_with model: @recipe, local: true, id: "post_form", class: "w-full" do |f| %>
    <!-- Image Upload -->
    <div class="w-full bg-gray-100 h-56 flex justify-center items-center mb-2">
      <%= f.file_field :main_image %>
    </div>

    <!-- Title Input -->
    <div>
      <%= f.text_field :title, placeholder: "なにを作ったのか教えてください！", class: "w-full bg-white border border-gray-300 rounded px-4 py-2 mb-1" %>
      <p class="text-xs text-amber-500 mb-4">ノンフライヤーを使用したレシピのみ登録してください</p>
    </div>

    <!-- Tags -->
    <div class="section w-full mb-4" data-section="tags">
      <div class="w-full mb-4">
        <%= f.label :tag_list, "タグ", class: "block text-gray-700 mb-2" %>
        <%= f.text_field :tag_list, value: @recipe.tag_list.join(","), class: "bg-white border border-gray-300 rounded px-4 py-2", placeholder: " , で区切ってください" %>
      </div>
    </div>

    <!-- model -->
    <div class="w-full mb-4">
      <%= f.label :model, "ノンフライヤーの機種", class: "block text-amber-500 mb-2" %>
      <%= f.text_field :model, placeholder: "cosori", class: "bg-white border border-gray-300 rounded px-4 py-2" %>
    </div>

    <!-- Preheat Section -->
    <div class="w-full grid grid-cols-2 gap-4 mb-4">
      <div>
        <%= f.label :preheat_temperature, "予熱", class: "block text-gray-700" %>
        <div class="flex items-center space-x-2">
          <%= f.text_field :preheat_temperature, type: "number", placeholder: "180", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
          <span class="text-gray-500">℃</span>
        </div>
      </div>
      <div>
        <label class="block text-gray-700">　</label>
        <div class="flex items-center space-x-2">
          <%= f.text_field :preheat_time, type: "number", placeholder: "3", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
          <span class="text-gray-500">分</span>
        </div>
      </div>
    </div>

    <!-- Heat Section -->
    <span class="text-amber-500">調理</span>
    <div class="w-full mb-4" id="heat-section">
      <%= f.fields_for :heats do |heat| %>
        <div class="heat-item flex items-center space-x-2 mb-2">
          <button class="remove-item text-gray-700 px-2" type="button">×</button>
          <%= heat.number_field :temperature, type: "number", placeholder: "180", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
          <span class="text-amber-500">℃</span>
          <%= heat.number_field :time, type: "number", placeholder: "10", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
          <span class="text-amber-500">分</span>
          <button class="add-item text-gray-700 px-4 py-2 rounded self-end" type="button">＋</button>
        </div>
      <% end %>
    </div>

    <!-- Ingredients Section -->
    <span class="text-gray-700">材料</span>
    <div class="w-full mb-4" id="ingredients-section">
      <div class="ingredient-item flex items-center space-x-2 mb-2">
        <button class="remove-item text-gray-700 px-2" type="button">×</button>
        <%= f.fields_for :ingredients do |ingredient| %>
          <%= ingredient.text_field :name, type: "text", placeholder: "素材", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
          <%= ingredient.text_field :quantity, type: "text", placeholder: "量", class: "w-full bg-white border border-gray-300 rounded px-2 py-1" %>
        <% end %>
        <button class="add-item text-gray-700 px-4 py-2 rounded self-end" type="button">＋</button>
      </div>
    </div>


    <!-- Steps Section -->
    <div id="steps-section" class="steps-section w-full mb-4">
      <%= f.fields_for :instructions do |instruction| %>
        <label class="block text-gray-700 mb-2">作り方</label>
        <div class="step-item flex items-center space-x-1 mb-2">
          <button class="remove-step text-gray-700 px-2" type="button">×</button>
          <%= instruction.file_field :image, class: "bg-gray-100 rounded px-1 py-2 w-14" %>
          <span class="step-number text-gray-400"><%= instruction.object.step_number %></span>
          <%= instruction.text_field :description, type: "text", class: "w-full bg-white border border-gray-300 rounded px-4 py-2" %>
          <button class="add-step text-gray-700 px-4 py-2 rounded" type="button">＋</button>
        </div>
      <% end %>
    </div>


    <!-- point Section -->
    <div class="w-full mb-4">
      <%= f.label :point, "ポイント", class: "block text-gray-700 mb-2" %>
      <div class="flex items-center space-x-2 mb-2">
        <%= f.text_field :point, type: "text", class: "w-full bg-white border border-gray-300 rounded px-4 py-2" %>
      </div>
    </div>

    <!-- embed Section -->
    <div class="embed_section w-full mb-4">
      <%= f.fields_for :embeds do |embed| %>
        <label class="block text-gray-700 mb-2">埋め込み</label>
        <div class="item flex items-center space-x-2 mb-2">
          <button class="remove-item text-gray-700 px-2" type="button">×</button>
          <div>
            <%= embed.select :kind, [["website","website"], ["youtube","youtube"], ["instagram","instagram"]], include_blank: "選択して下さい" %>
            <%= embed.text_field :url, class: "w-full bg-white border border-gray-300 rounded px-4 py-2" %>
          </div>
          <button class="add-item text-gray-700 px-4 py-2 rounded" type="button">＋</button>
      <% end %>
    </div>
  <% end %>

  <script>
    // embed Sections
    document.addEventListener("turbo:load", () => {
      document.querySelectorAll(".embed_section").forEach((section) => {
        if (section.dataset.listenerAdded) return;
        section.dataset.listenerAdded = "true"; // フラグ設定

        section.addEventListener("click", (e) => {
          if (e.target.classList.contains("add-item") && e.target.type === "button") {
            e.preventDefault();

            // 既存の最後の `.item` を取得し、複製
            const lastItem = section.querySelector(".item:last-of-type");
            if (!lastItem) return;

            const newItem = lastItem.cloneNode(true);

            // ユニークなIDを生成するためのindex取得
            const index = section.querySelectorAll(".item").length;

            // 新しい `select` と `input` のidを更新
            const selectField = newItem.querySelector("select");
            const inputField = newItem.querySelector("input");

            selectField.id = `embed_kind_${index}`;
            selectField.name = `recipe[embeds_attributes][${index}][kind]`;

            inputField.id = `embed_url_${index}`;
            inputField.name = `recipe[embeds_attributes][${index}][url]`;

            // 入力値をクリア
            selectField.value = "";
            inputField.value = "";

            // `add-item` ボタンを移動（常に最後の要素に配置するため）
            const addButton = newItem.querySelector(".add-item");
            lastItem.querySelector(".add-item").remove(); // 既存の `add-item` を削除

            section.appendChild(newItem);
            newItem.appendChild(addButton);
          }

          else if (e.target.classList.contains("remove-item") && e.target.type === "button") {
            e.preventDefault();
            const items = section.querySelectorAll(".item");
            if (items.length > 1) {
              e.target.closest(".item").remove();
            }
          }
        });
      });
    });

    // Step Section
    document.addEventListener("turbo:load", () => {
      const stepsSection = document.getElementById("steps-section");

      if (!stepsSection) return; // 対象のセクションが存在しない場合は処理を終了

      // イベントリスナーが重複して追加されないようにフラグを使用
      if (stepsSection.dataset.listenerAdded) return;
      stepsSection.dataset.listenerAdded = "true"; // フラグ設定

      function updateStepNumbers() {
        const stepItems = stepsSection.querySelectorAll(".step-item");
        stepItems.forEach((item, index) => {
          item.querySelector(".step-number").textContent = index + 1;
        });
      }

      stepsSection.addEventListener("click", (e) => {
        if (e.target.classList.contains("add-step") && e.target.type === "button") {
          e.preventDefault(); // フォームの送信を防ぐ

          const stepIndex = stepsSection.querySelectorAll(".step-item").length;
          const newStep = document.createElement("div");
          newStep.className = "step-item flex items-center space-x-2 mb-2";
          newStep.innerHTML = `
            <button class="remove-step text-gray-700 px-2" type="button">×</button>
            <input type="file" name="recipe[instructions_attributes][${stepIndex}][image]" class="block bg-gray-100 rounded px-1 py-2 w-14" />
            <span class="step-number text-gray-400">${stepIndex + 1}</span>
            <input type="text" name="recipe[instructions_attributes][${stepIndex}][description]" class="w-full bg-white border border-gray-300 rounded px-4 py-2" />
            <button class="add-step text-gray-700 px-4 py-2 rounded" type="button">＋</button>
            </・div>
          `;
          stepsSection.appendChild(newStep);
          updateStepNumbers();
        } else if (e.target.classList.contains("remove-step") && e.target.type === "button") {
          e.preventDefault();
          const stepItems = stepsSection.querySelectorAll(".step-item");
          if (stepItems.length > 1) {
            e.target.closest(".step-item").remove();
            updateStepNumbers();
          }
        }
      });

      function updateStepNumbers() {
        const stepItems = stepsSection.querySelectorAll(".step-item");
        stepItems.forEach((item, index) => {
          item.querySelector(".step-number").textContent = index + 1;
        });
      }
    });

    // Heat Section
    document.addEventListener("turbo:load", () => {
      const heatSection = document.getElementById("heat-section");
      if (!heatSection) return;

      if (heatSection.dataset.listenerAdded) return;
      heatSection.dataset.listenerAdded = "true"; // フラグ設定

      heatSection.addEventListener("click", (e) => {
        // 入力欄を追加
        if (e.target.classList.contains("add-item") && e.target.type === "button") {
          e.preventDefault(); // フォーム送信を防ぐ

          // 現在の数をカウントしてインデックスを設定
          const index = document.querySelectorAll(".heat-item").length;

          const newItem = document.createElement("div");
          newItem.className = "heat-item flex items-center space-x-2 mb-2";
          newItem.innerHTML = `
            <button class="remove-item text-gray-700 px-2" type="button">×</button>
            <input type="number" name="recipe[heats_attributes][${index}][temperature]" placeholder="180" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
            <span class="text-amber-500">℃</span>
            <input type="number" name="recipe[heats_attributes][${index}][time]" placeholder="10" class="w-full bg-white border border-gray-300 rounded px-2 py-1" />
            <span class="text-amber-500">分</span>
            <button class="add-item text-gray-700 px-4 py-2 rounded" type="button">＋</button>
          `;
          heatSection.appendChild(newItem);
        }

        // 入力欄を削除
        if (e.target.classList.contains("remove-item") && e.target.type === "button") {
          e.preventDefault();
          const items = document.querySelectorAll(".heat-item");
          if (items.length > 1) {
            e.target.closest(".heat-item").remove();
          }
        }
      });
    });

    // Ingredients Section
    document.addEventListener("turbo:load", () => {
      const ingredientsSection = document.getElementById("ingredients-section");
      if (!ingredientsSection) return;

      // イベントリスナーが複数回追加されるのを防止
      if (ingredientsSection.dataset.listenerAdded) return;
      ingredientsSection.dataset.listenerAdded = "true";

      ingredientsSection.addEventListener("click", (e) => {
        // 入力欄を追加
        if (e.target.classList.contains("add-item") && e.target.type === "button") {
          e.preventDefault();

          // 現在の数をカウントしてインデックスを設定
          const currentItems = document.querySelectorAll(".ingredient-item");
          const index = currentItems.length;

          // 新しい入力欄を作成
          const newItem = document.createElement("div");
          newItem.className = "ingredient-item flex items-center space-x-2 mb-2";
          newItem.innerHTML = `
            <button class="remove-item text-gray-700 px-2" type="button">×</button>
            <input type="text" name="recipe[ingredients_attributes][${index}][name]" class="w-full bg-white border border-gray-300 rounded px-2 py-1" placeholder="素材" />
            <input type="text" name="recipe[ingredients_attributes][${index}][quantity]" class="w-full bg-white border border-gray-300 rounded px-2 py-1" placeholder="量" />
            <button class="add-item text-gray-700 px-4 py-2 rounded" type="button">＋</button>
          `;

          ingredientsSection.appendChild(newItem);
        }

        // 入力欄を削除
        if (e.target.classList.contains("remove-item") && e.target.type === "button") {
          e.preventDefault();
          const items = document.querySelectorAll(".ingredient-item");
          if (items.length > 1) {
            e.target.closest(".ingredient-item").remove();
          }
        }
      });
    });
  </script>
